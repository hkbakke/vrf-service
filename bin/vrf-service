#!/bin/bash

set -e

TEST=false
RESTART=true

print_usage () {
    >&2 echo "Usage: $0 [-n] [-t] VRF UNIT_FILE..."
}

restart_service () {
    systemctl daemon-reload

    if ${RESTART}
    then
        systemctl restart "${service}"
    fi
}

add_override () {
    # Check if the VRF exists
    ip vrf show "${vrf}" > /dev/null || exit 1

    [[ -d ${override_dir} ]] || mkdir "${override_dir}"
    tmpfile=$(mktemp -p "${tmpdir}")

    {
        echo "[Service]"

        keyword=""
        while read -r line
        do
            [[ "${line}" =~ ^(Exec.+)?=(.+)$ ]]
            if [[ "${keyword}" != "${BASH_REMATCH[1]}" ]]
            then
                echo "${BASH_REMATCH[1]}="
            fi
            keyword="${BASH_REMATCH[1]}"
            echo "${BASH_REMATCH[1]}=$(command -v ip) vrf exec ${vrf} ${BASH_REMATCH[2]}"
        done <<< "$(grep '^Exec' "${unit_file}")"
    } > "${tmpfile}"

    if ! diff -N "${override}" "${tmpfile}"
    then
        ${TEST} && exit 1
        mv "${tmpfile}" "${override}"
        restart_service
    fi
}

remove_override () {
    diff -N "${override}" /dev/null || true
    ${TEST} && exit 1
    rm -r "${override_dir}"
    restart_service
}

while getopts ":nt" opt
do
    case ${opt} in
        n)
            RESTART=false
            ;;
        t)
            TEST=true
            ;;
        \?)
            print_usage
            exit 2
            ;;
    esac
done

shift "$((OPTIND - 1))"

# Ensure one or more unit files are provided
if [[ $# -lt 2 ]]
then
    print_usage
    exit 2
fi

# The first mandatory argument is the VRF, followed by a list of unit files
vrf="$1"
shift

tmpdir=$(mktemp -d)
# Ensure temporary files is cleaned up regardless of script success
trap 'rm -r ${tmpdir}' EXIT

for unit_file in "$@"
do
    if [[ ! -f ${unit_file} ]]
    then
        >&2 printf "The unit file '%s' does not exist\\n" "${unit_file}"
        exit 1
    fi

    service=$(basename "${unit_file}")
    override_dir="/etc/systemd/system/${service}.d"
    override="${override_dir}/override.conf"

    # If no VRF is provided or the VRF name is `default`, remove the VRF
    # override configuration.
    if [[ "${vrf}" == "default" ]]
    then
        [[ -f ${override} ]] && remove_override
    else
        add_override
    fi
done

# Exit with explicit exit code to avoid exiting with the exit code of the
# override file test if VRF is empty and no override file exists.
exit 0
